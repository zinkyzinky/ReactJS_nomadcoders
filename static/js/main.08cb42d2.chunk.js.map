{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","potato","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAwEA,SAASA,EAATC,GAAoC,IAAdC,EAAcD,EAAdC,OAAQC,EAAMF,EAANE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAI1D,SAASC,EAATC,GAA6B,IAARC,EAAQD,EAARC,MACjB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,GAoBzBC,MAxEf,SAAAC,GAAkD,IAAlCN,EAAkCM,EAAlCN,MAAON,EAA2BY,EAA3BZ,OAAQa,EAAmBD,EAAnBC,OAAQC,EAAWF,EAAXE,SACnC,OACIZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBAEXL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEtCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACVM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OAAkBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAEjEd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACXL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACIgB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCyCjBC,6MAtEbC,MAAQ,KA0BRC,cAAgB,WAUd,OATeC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GACnC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CACLxB,MAAOuB,EAAME,cACb/B,OAAQ6B,EAAMG,mBACdf,IAAKY,EAAMI,GACXpB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAOtBoB,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUb,EAAKc,WADf,OACLb,EADKU,EAAAI,KAKXf,EAAKgB,SAAS,CAEZf,WAPS,wBAAAU,EAAAM,SAAAT,QAWbM,SAAW,WACT,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKrB,SACvBsB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFA9C1BG,KAAKpB,8CAkDE,IACCN,EAAW0B,KAAK7B,MAAhBG,OACR,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,gBAC3BA,EAAS0B,KAAK5B,gBAAkB,kBA5E1B6B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.08cb42d2.chunk.js","sourcesContent":["import React from 'react'; //  {Component} 이건 이제 없어도 되니까 제거!!\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis'\nimport './Movie.css';\n// class Movie extends Component{\n\n//     /** 부모에게 받은 컴포넌트 정보 체크 가능!!\n//      *  타입, 필수 체크등 \n//      */\n//     static propTypes = {\n//         title: PropTypes.string.isRequired,\n//         poster: PropTypes.string\n//     }\n//     render() {\n//         return (\n//             <div>\n//                 <MoviePoster poster={this.props.poster} />\n//                 <h1>{this.props.title}</h1>\n//             </div>\n//         )\n        \n//     }\n// }\n\n/** functional component 만들어보기 \n *  class 들은 그 안에 this 라는 키워드가 존재하므로, this.blahblah.... 가능하지만,\n *  functional component는 클래스형이 아니라서.. this.~~ 접근을 할 수가 없다. 이미 props 를 쓰니까!\n*/\nfunction Movie({title, poster, genres, synopsis}) {\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie__Column\">\n                {/** this.props.poster 이라고 하면 에러!! 클래스가 아니니까!! */ }\n                <MoviePoster poster={poster} alt={title}/>       \n            </div>\n            <div className=\"Movie__Column\">\n                <h1>{title}</h1>\n                <div className=\"Movie__Genres\">\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)} \n                </div>\n                <div className=\"Movie__Synopsis\">\n                    <LinesEllipsis\n                        text={synopsis}\n                        maxLine='3'\n                        ellipsis='...'\n                        trimRight\n                        basedOn='letters'\n                    />   \n                </div>\n            </div>\n        </div>\n    )\n}\n\n\n// 클래스형 컴포넌트 !\n// class MoviePoster extends Component {\n    \n//     static propTypes = {\n//         poster : PropTypes.string.isRequired\n//     }\n//     render() {\n//         return (\n//             <img src={this.props.poster} alt=\"Movie Poster\"/>\n//         )\n//     }\n// }\n\n\n// functional component (state 가 없고, props 만 존재하며, 그냥 return 을 하기 위한 존재일뿐일 때!!!)\n// 그냥 1개의 props 만 있으면 됨. 1개!!! 1개의 props, 1개의 html 태그만 필요.\n// function render 없고, 라이프 사이클 또한 없음. 그저 return 만 있음!\nfunction MoviePoster({poster, alt}) {\n    return (\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\n    )\n}\n\nfunction MovieGenre({genre}) {\n    return (\n        <span className=\"Movie__Genre\">{genre}</span>\n    )\n}\n\n// 유효성? 규격 검사\nMoviePoster.propTypes = {\n    poster: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired\n\n}\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n}\nMovieGenre.propTypes = {\n    genre: PropTypes.string.isRequired\n}\n\nexport default Movie\n","import React, {Component} from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\n  /** render 할 때, (컴포넌트를 띄울 때) 아래와 같은 순서로 한다 */\n  // Render : componentWillMount() -> render -> componentDidMount()\n  \n  /** 컴포넌트가 새로운 props를 받아 들였다. \n   * -> old props vs new props 비교해서 다르면 update == true 라고 인식 \n   * -> 컴포넌트가 업데이트를 할 것 이다! 단계 \n   */\n  // Update componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> componentDidUpdate()\n  // componentWillUpdate() 이 순간에 로딩중 뱅글뱅글 돌아가겠지. spinner  \n  // componentDidUpdate() (업데이트 이후에는) 돌고 있던 '로딩 중' 메세지나 아이콘을 숨기면 됨!! \n\n  state = {\n  }\n  \n  // state 를 직접 수정하면 리액트에서 지정된 render의 설정이 작동하지 않는다.\n  // setState 로 업데이트하고, 업데이트할 때마다 render 이 작동할 것이다!! 새로운 state와 함께~~ \n  // .then() 앞에 지정된 작업이 (성공/실패 상관없이) 그냥 작업이 완료되면, thenㅇ르 부름 -> catch\n  // 큰 componentDidMount 는 좋지 않음?! ㅋ\n  componentDidMount() {\n\n    this._getMovies();\n    //  // --> 이전 작업 내용 callApi()로 이동!!\n    // fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n    // // .then(potato => console.log(potato))\n    // // .then(response => console.log(response)) 변수명? 마음대로 작명 가능 ! \n    // .then(potato => potato.json())\n    // // .then(json => {\n    // //   this.setState({\n    // //     movies: json.data.movies\n    // //   }).then().then().... Callback hell!!!\n    // // })\n    // // 이렇게 쓰면 콜백지옥에 빠짐! -> 따로 함수로 빼서 적용해주기!!\n    // .then(json => console.log(json))\n    // .catch(err => console.log(err))\n  }\n\n  // 영화리스트를 불러오는 함수 \n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return <Movie \n        title={movie.title_english} \n        poster={movie.medium_cover_image} \n        key={movie.id} \n        genres={movie.genres}\n        synopsis={movie.synopsis}\n        />\n    })\n    return movies;\n  }\n\n  // async로 처리 ! \n  _getMovies = async () => {\n    const movies = await this._callApi() \n    // 아래 소스는 callApi() 가 완료되지 않는 이상 실행되지 않을 것! \n    // await 는 해당 함수(this._callApi())가 '끝날 것'을 기다리고!!\n    // '성공적인 수행'이 아니라 그저 완료!! 기다리고 return value를 담는다!!! \n    this.setState({\n      // movies = movies \n      movies      // 위와 동일한 것! call api 의 return value!!\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(potato => potato.json())\n    .then(json => json.data.movies) // => arrow function 기능 자체에 return 이라는 뜻이 내재 되어있어서 return을 적을 필요가 없음!\n    .catch(err => console.log(err))\n  }\n\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n          { movies ? this._renderMovies() : 'Loading' }\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}